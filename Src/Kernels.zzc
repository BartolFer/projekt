#include "./Util.zzh"
#pragma region zzc hdr_decl
	#include <cstdint>
	#include "./Huffman.zzh"
	#include "./Markers.zzh"
	#include "./Util.zzh"
	#include "./MyOpenCL.zzh"
#pragma endregion zzc
#pragma region zzc src_decl
	#include <bit>
	#include "./kernels.cl.tmp.zzh"
#pragma endregion zzc

namespace BJpeg {
	struct LaneInfo {
		u8 c_id;
		u8 dc_huf;
		u8 ac_huf;
		u8 q_id;
		u8 sf_y;
		u8 sf_x;
		u8 start_in_mcu;
		u8 amount_in_mcu;
	};

	struct Kernels {
		typedef MyOpenCL :: Buffer<HuffmanTree[4]> HuffmanBuf;
		struct decodeHuffman1 : MyOpenCL :: Kernel<2> {
			fun bool init(MyOpenCL :: Program program) { return static_cast<MyOpenCL :: Kernel<2>&>(self).init(program, "decodeHuffman1"); }
			fun bool setArg_payload           (MyOpenCL :: Buffer<u8>          x) { return self.setArg(x, 0); }
			fun bool setArg_B2                (u32                             x) { return self.setArg(x, 1); }
			fun bool setArg_trees             (HuffmanBuf                      x) { return self.setArg(x, 2); }
			fun bool setArg_lane_infos        (MyOpenCL :: Buffer<LaneInfo>    x) { return self.setArg(x, 3); }
			fun bool setArg_lanes             (MyOpenCL :: Buffer<u32>         x) { return self.setArg(x, 4); }
			fun bool setArg_lane_width        (u32                             x) { return self.setArg(x, 5); }
			fun bool setArg_lane_indexes      (MyOpenCL :: Buffer<u8>          x) { return self.setArg(x, 6); }
		} decodeHuffman1;
		
		struct decodeRaise : MyOpenCL :: Kernel<2> {
			fun bool init(MyOpenCL :: Program program) { return static_cast<MyOpenCL :: Kernel<2>&>(self).init(program, "decodeRaise"); }
			fun bool setArg_lanes             (MyOpenCL :: Buffer<u32>         x) { return self.setArg(x, 0); }
			fun bool setArg_lane_width        (u32                             x) { return self.setArg(x, 1); }
			fun bool setArg_lanes_count       (u8                              x) { return self.setArg(x, 2); }
			fun bool setArg_prev_size_pow     (u8                              x) { return self.setArg(x, 3); }
		} decodeRaise;
		
		struct decodeLower : MyOpenCL :: Kernel<2> {
			fun bool init(MyOpenCL :: Program program) { return static_cast<MyOpenCL :: Kernel<2>&>(self).init(program, "decodeLower"); }
			fun bool setArg_positions         (MyOpenCL :: Buffer<u32>         x) { return self.setArg(x, 0); }
			fun bool setArg_lanes             (MyOpenCL :: Buffer<u32>         x) { return self.setArg(x, 1); }
			fun bool setArg_lane_width        (u32                             x) { return self.setArg(x, 2); }
			fun bool setArg_lanes_count       (u8                              x) { return self.setArg(x, 3); }
			fun bool setArg_size_pow          (u8                              x) { return self.setArg(x, 4); }
		} decodeLower;
		
		struct positionsToIndexes : MyOpenCL :: Kernel<2> {
			fun bool init(MyOpenCL :: Program program) { return static_cast<MyOpenCL :: Kernel<2>&>(self).init(program, "positionsToIndexes"); }
			fun bool setArg_positions         (MyOpenCL :: Buffer<u32>         x) { return self.setArg(x, 0); }
			fun bool setArg_indexes           (MyOpenCL :: Buffer<u32x2>       x) { return self.setArg(x, 1); }
			fun bool setArg_lane_width        (u32                             x) { return self.setArg(x, 2); }
		} positionsToIndexes;
		
		struct decodeHuffman2 : MyOpenCL :: Kernel<1> {
			fun bool init(MyOpenCL :: Program program) { return static_cast<MyOpenCL :: Kernel<1>&>(self).init(program, "decodeHuffman2"); }
			fun bool setArg_payload           (MyOpenCL :: Buffer<u8>          x) { return self.setArg(x, 0); }
			fun bool setArg_trees             (HuffmanBuf                      x) { return self.setArg(x, 1); }
			fun bool setArg_lane_infos        (MyOpenCL :: Buffer<LaneInfo>    x) { return self.setArg(x, 2); }
			fun bool setArg_lane_width        (u32                             x) { return self.setArg(x, 3); }
			fun bool setArg_indexes           (MyOpenCL :: Buffer<u32x2>       x) { return self.setArg(x, 4); }
			fun bool setArg_coefficients      (MyOpenCL :: Buffer<i16[64]>     x) { return self.setArg(x, 5); }
		} decodeHuffman2;
		
		struct initializeBufferU32 : MyOpenCL :: Kernel<1> {
			fun bool init(MyOpenCL :: Program program) { return static_cast<MyOpenCL :: Kernel<1>&>(self).init(program, "initializeBufferU32"); }
			fun bool setArg_buffer            (MyOpenCL :: Buffer<u32>         x) { return self.setArg(x, 0); }
			fun bool setArg_value             (u32                             x) { return self.setArg(x, 1); }
		} initializeBufferU32;
		
		struct prepareMCUs : MyOpenCL :: Kernel<2> {
			fun bool init(MyOpenCL :: Program program) { return static_cast<MyOpenCL :: Kernel<2>&>(self).init(program, "prepareMCUs"); }
			fun bool setArg_coefficients      (MyOpenCL :: Buffer<i16[64]>     x) { return self.setArg(x, 0); }
			fun bool setArg_lane_infos        (MyOpenCL :: Buffer<LaneInfo>    x) { return self.setArg(x, 1); }
			fun bool setArg_mcu_length        (u8                              x) { return self.setArg(x, 2); }
		} prepareMCUs;
		
		struct prefixSum1 : MyOpenCL :: Kernel<1> {
			fun bool init(MyOpenCL :: Program program) { return static_cast<MyOpenCL :: Kernel<1>&>(self).init(program, "prefixSum1"); }
			fun bool setArg_coefficients      (MyOpenCL :: Buffer<i16[64]>     x) { return self.setArg(x, 0); }
			fun bool setArg_lane_infos        (MyOpenCL :: Buffer<LaneInfo>    x) { return self.setArg(x, 1); }
			fun bool setArg_half_size         (u32                             x) { return self.setArg(x, 2); }
			fun bool setArg_mcu_length        (u8                              x) { return self.setArg(x, 3); }
		} prefixSum1;
		
		struct prefixSum2 : MyOpenCL :: Kernel<1> {
			fun bool init(MyOpenCL :: Program program) { return static_cast<MyOpenCL :: Kernel<1>&>(self).init(program, "prefixSum2"); }
			fun bool setArg_coefficients      (MyOpenCL :: Buffer<i16[64]>     x) { return self.setArg(x, 0); }
			fun bool setArg_lane_infos        (MyOpenCL :: Buffer<LaneInfo>    x) { return self.setArg(x, 1); }
			fun bool setArg_half_size         (u32                             x) { return self.setArg(x, 2); }
			fun bool setArg_mcu_length        (u8                              x) { return self.setArg(x, 3); }
		} prefixSum2;
		
		struct unzigzag_quantization_dct : MyOpenCL :: Kernel<1> {
			fun bool init(MyOpenCL :: Program program) { return static_cast<MyOpenCL :: Kernel<1>&>(self).init(program, "unzigzag_quantization_dct"); }
			fun bool setArg_coefficients      (MyOpenCL :: Buffer<i16[64]>     x) { return self.setArg(x, 0); }
			fun bool setArg_quantization_table(MyOpenCL :: Buffer<i16[64]>     x) { return self.setArg(x, 1); }
			fun bool setArg_lane_infos        (MyOpenCL :: Buffer<LaneInfo>    x) { return self.setArg(x, 2); }
			fun bool setArg_mcu_length        (u8                              x) { return self.setArg(x, 3); }
		} unzigzag_quantization_dct;
		
		struct uninterleave_upsample : MyOpenCL :: Kernel<2> {
			fun bool init(MyOpenCL :: Program program) { return static_cast<MyOpenCL :: Kernel<2>&>(self).init(program, "uninterleave_upsample"); }
			fun bool setArg_coefficients      (MyOpenCL :: Buffer<i16[64]>     x) { return self.setArg(x, 0); }
			fun bool setArg_lane_infos        (MyOpenCL :: Buffer<LaneInfo>    x) { return self.setArg(x, 1); }
			fun bool setArg_half_size         (u32                             x) { return self.setArg(x, 2); }
			fun bool setArg_mcu_length        (u8                              x) { return self.setArg(x, 3); }
		} uninterleave_upsample;
		
		fun bool init(MyOpenCL :: Program program) {
			return true
				&& self.decodeHuffman1           .init(program)
				&& self.decodeRaise              .init(program)
				&& self.decodeLower              .init(program)
				&& self.positionsToIndexes       .init(program)
				&& self.decodeHuffman2           .init(program)
				&& self.initializeBufferU32      .init(program)
				&& self.prepareMCUs              .init(program)
				&& self.prefixSum1               .init(program)
				&& self.prefixSum2               .init(program)
				&& self.unzigzag_quantization_dct.init(program)
				&& self.uninterleave_upsample    .init(program)
			;
		}
		fun void finish() noexcept {
			self.decodeHuffman1           .finish();
			self.decodeRaise              .finish();
			self.decodeLower              .finish();
			self.positionsToIndexes       .finish();
			self.decodeHuffman2           .finish();
			self.initializeBufferU32      .finish();
			self.prepareMCUs              .finish();
			self.prefixSum1               .finish();
			self.prefixSum2               .finish();
			self.unzigzag_quantization_dct.finish();
			self.uninterleave_upsample    .finish();
		}
	};
}
