#include <iostream>
#include <cstdint>
#include "./Test.zzh"
#include "./FileBuffer.zzh"
#include "./Context.zzh"
#include "./Decoder.zzh"
#include "./MetaData.zzh"


uint8_t BJpeg :: recomended_space_pow = 26; // 64 MiB
	// note that this is not the actual space requirement
	// this is just a value that is used in a lot of buffers


fun int main(int argc, char* argv[]) {
	if (argc > 3) {
		printf("Usage: <exe> path/to/file.jpg\n");
		exit(EXIT_FAILURE);
	}
	std :: string path = argc >= 2 ? argv[1] : "D:/Personal/nastava/projekt/Temp/Zugpsitze_mountain.jpg";
	
	using namespace BJpeg;
	//	if (recomended_space_pow < 8) {
	//		std :: cerr << "Recommended space is at least 256B (2^8)" << std :: endl;
	//		return EXIT_FAILURE;
	//	}
	#ifdef TESTING
		if (!Test :: runTests()) { return EXIT_FAILURE; }
	#endif
	
	Resource<InputFileBuffer> file(path);
	if (!file   ) { std :: cerr << "!file"    << std :: endl; return 1; }
	Resource<DecodeContext> context;
	if (!context) { std :: cerr << "!context" << std :: endl; return 1; }
	
	auto res = Decode :: image(context, file, 0);
	std :: cout << "res = " << res << std :: endl;
	
	
	
	// InputFileBuffer file(recomended_space_pow, "D:/temp/Zugpsitze_mountain.jpg");
	// auto& context = *new Context<CodingType :: DECODE>;
	// auto res = Decode :: image(context, file, 0);
	// printf("res = %u\n", res);
	// FILE* context_file = fopen("D:/temp/jpg_context.txt", "w");
	// if (res == 0) { return EXIT_FAILURE; }
	// fprintf(context_file, "SOF = %s %s %d\n", context.sof_data.arithmetic ? "A" : "H", context.sof_data.differential ? "d" : "n", context.sof_data.mode);
	// fprintf(context_file, "X=%u Y=%u r=%u p=%u\n", context.X, context.Y, context.restart_interval, context.precision);
	// for (int i = 0; i < 2; ++i) {
	// 	for (int j = 0; j < 2; ++j) {
	// 		auto& ht = context.huffman_tree[i][j];
	// 		fprintf(context_file, "H[%d][%d] |", i, j);
	// 		ht.printToFile(context_file);
	// 		fprintf(context_file, "\n");
	// 	}
	// 	fprintf(context_file, "\n");
	// }
	// delete &context;
	if (res == DECODE_RESULT_ERR) { return EXIT_FAILURE; }
	if (res != file.length) { return EXIT_FAILURE; }
	
	
	
	MetaData metadata = { .width = (int) context.size.x_mayor, .height = (int) context.size.y_mayor, .n_channels = 4 };
	size_t total_pixels = metadata.height * metadata.width;
	RGBA* arr = new RGBA[total_pixels];
	if (!context.cl.buffer.image.read(context.cl.queue, arr)) { clog("Failed to read result image buffer"); return EXIT_FAILURE; }

	char const* output_path = argc >= 3 ? argv[2] : "D:/Personal/nastava/projekt/Temp/output.rgba";
	FILE* output = fopen(output_path, "wb");
	if (output == nullptr) { clog("Failed to open output file %s", output_path); return EXIT_FAILURE; }
	defer { fclose(output); };
	fwrite(&metadata, sizeof(metadata), 1, output);
	fwrite(arr, sizeof(RGBA), total_pixels, output);
	fclose(output);
}