#ifndef VSCODE_ONLY
	#hdr
		#pragma once
	#end
	#src
		#include <iostream>
		#include <cstdint>
		#include "./Test.hpp"
		#include "./FileBuffer.hpp"
		#include "./Context.hpp"
		#include "./Decoder.hpp"
	#end
#else
	#include <iostream>
	#include <cstdint>
	#include "./Main.hpp"
	#include "./Test.hpp"
	#include "./FileBuffer.hpp"
	#include "./Context.hpp"
	#include "./Decoder.hpp"
#endif

uint8_t BJpeg :: recomended_space_pow = 26; // 64 MiB
	// note that this is not the actual space requirement
	// this is just a value that is used in a lot of buffers


int main() {
	using namespace BJpeg;
	//	if (recomended_space_pow < 8) {
	//		std :: cerr << "Recommended space is at least 256B (2^8)" << std :: endl;
	//		return EXIT_FAILURE;
	//	}
	#ifdef TESTING
		//	return 
		Test :: runTests() ? EXIT_SUCCESS : EXIT_FAILURE;
	#endif
	
	Resource<InputFileBuffer> file("D:/Personal/nastava/projekt/Temp/J32_1_small.jpg");
	//	Resource<InputFileBuffer> file("D:/temp/Zugpsitze_mountain.jpg");
	if (!file   ) { std :: cerr << "!file"    << std :: endl; return 1; }
	DecodeContext context;
	//	if (!context) { std :: cerr << "!context" << std :: endl; return 1; }
	
	auto res = Decode :: image(context, file, 0);
	std :: cout << "res = " << res << std :: endl;
	
	// InputFileBuffer file(recomended_space_pow, "D:/temp/Zugpsitze_mountain.jpg");
	// auto& context = *new Context<CodingType :: DECODE>;
	// auto res = Decode :: image(context, file, 0);
	// printf("res = %u\n", res);
	// FILE* context_file = fopen("D:/temp/jpg_context.txt", "w");
	// if (res == 0) { return EXIT_FAILURE; }
	// fprintf(context_file, "SOF = %s %s %d\n", context.sof_data.arithmetic ? "A" : "H", context.sof_data.differential ? "d" : "n", context.sof_data.mode);
	// fprintf(context_file, "X=%u Y=%u r=%u p=%u\n", context.X, context.Y, context.restart_interval, context.precision);
	// for (int i = 0; i < 2; ++i) {
	// 	for (int j = 0; j < 2; ++j) {
	// 		auto& ht = context.huffman_tree[i][j];
	// 		fprintf(context_file, "H[%d][%d] |", i, j);
	// 		ht.printToFile(context_file);
	// 		fprintf(context_file, "\n");
	// 	}
	// 	fprintf(context_file, "\n");
	// }
	// delete &context;
}