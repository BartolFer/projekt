#include "../Util.zzh"
#include "./DecoderMacro.zzh"
#pragma region zzc hdr_decl
	#include <cstdint>
	#include <type_traits>
	// #include <cstddef>
	#include "./FileBuffer.zzh"
	#include "./Context.zzh"
#pragma endregion zzc
#pragma region zzc src_decl
	#include <string.h>
	#include <iostream>
	#include <bit>
	#include "./Huffman.zzh"
	#include "../Markers.zzh"
	#include "../Test.zzh"
#pragma endregion zzc


#pragma region zzc src_decl
    #define DEBUG_LANES(title) {                                                                                   \
        printf(title "\n");                                                                                        \
        size_t depth = context.size.lane_depth;                                                                    \
        size_t width = context.size.lane_width;                                                                    \
        size_t count = context.size.mcu_length;                                                                    \
        u32* lanes_arr = new u32[cl.buffer.lanes.length];                                                          \
        if (!cl.buffer.lanes.read(cl.queue, lanes_arr)) { clog("bbx sss 1"); return DECODE_RESULT_ERR; }                              \
        for (int d = 0; d < depth; ++d) {                                                                          \
            printf("\t== %d ===========================\n\t\t", d);                                                \
            for (int i = 0; i < width; ++i) { printf(" %2d", i); }                                                 \
            for (int lane_id = 0; lane_id < count; ++lane_id) {                                                    \
                printf("\n\t\t");                                                                                  \
                for (int i = 0; i < width; ++i) {                                                                  \
                    u32 v = lanes_arr[(d * count + lane_id) * width + i];                                          \
                    if (v == ~0U) { printf("  x"); }                                                               \
                    else          { printf(" %2u", v); }                                                           \
                }                                                                                                  \
            }                                                                                                      \
            printf("\n");                                                                                          \
        }                                                                                                          \
        printf("\n");                                                                                              \
        delete[] lanes_arr;                                                                                        \
    }
#pragma endregion zzc

#define RESET_SCAN_CONTEXT() do for (int ci = 0; ci < MAX_COMPONENTS; ++ci) { auto C = component_order[ci]; context.component_data[C].predictor = 0; } while (0)

#define _LOG_COEFS_FMT_f "%.2f  "
#define _LOG_COEFS_FMT0_f "0  "
// #define _LOG_COEFS_FMT_i "%08x  "
// #define _LOG_COEFS_FMT0_i "       0  "
#define _LOG_COEFS_FMT_i "%d  "
#define _LOG_COEFS_FMT0_i "0  "
#define LOG_COEFS(id, fi, ...) {                                                                               \
	typedef FI FI8x8[8][8];                                                                                \
	int const length = (__VA_ARGS__);                                                                      \
	FI8x8* arr = new FI8x8[length];                                                                        \
	defer { delete[] arr; };                                                                               \
	arr[0][0][0].fi = 884;                                                                                 \
	if (!context.cl.buffer.coefficients.read(context.cl.queue, arr, length)) {                             \
		clog("Error reading buffer " id " line:%d", __LINE__);                                                    \
	}                                                                                                      \
	printf("== bbx logcoef " id " %d ================================================================================\n", __LINE__);                                  \
	for (int index = 0; index < length; ++index) {                                                         \
		printf("==== bbx %d\n", index);                                                                    \
		for (int i = 0; i < 8; ++i) {                                                                      \
			for (int j = 0; j < 8; ++j) {                                                                  \
				if (arr[index][i][j].fi == 0) {printf(_LOG_COEFS_FMT0_ ## fi, arr[index][i][j].fi);}                                        \
				else {printf(_LOG_COEFS_FMT_ ## fi, arr[index][i][j].fi);}                                        \
			}                                                                                              \
			printf("\n");                                                                                  \
		}                                                                                                  \
	}                                                                                                      \
	fflush(stdout);                                                                                        \
}


namespace BJpeg {
	namespace Decode {
		DECODE_FUN(scan) {
			clog("bbx scan");
			// interpret header
			u32 result;
			ASSERT_MARKER(Marker :: SOS);
			u16 Lf; DECODE_READ_U16(Lf);
			u8 Ns = DECODE_READ_U8;
			if (Ns >= MAX_COMPONENTS) { 
				std :: cerr << "Not supported more than " << MAX_COMPONENTS << " components: s=" << Ns << "\n";
				clog("bbx sss 0"); return DECODE_RESULT_ERR;
			}
			LaneInfo lane_infos[MAX_MCU_LENGTH];
			u8 lane_indexes[MAX_COMPONENTS];
			u8 lanes_count = 0;
			u8x2 max_sf = {1, 1};
			for (u8 i = 0; i < Ns; ++i) {
				u8 C = DECODE_READ_U8;
				if (C >= MAX_COMPONENTS) {
					std :: cerr << "Not supported more than " << MAX_COMPONENTS << " components: cs=" << C << "\n";
					clog("bbx sss 2"); return DECODE_RESULT_ERR;
				}
				auto& component_data = context.component_data[C];
				DECODE_READ_U4(component_data.dc_entropy_table, component_data.ac_entropy_table);
				lane_indexes[i] = lanes_count;
				for (u8 y = 0; y < component_data.sampling_factor_y; ++y) {
					for (u8 x = 0; x < component_data.sampling_factor_x; ++x) {
						auto li = lane_infos[lanes_count] = LaneInfo{
							.c_id = C,
							.dc_huf = component_data.dc_entropy_table,
							.ac_huf = component_data.ac_entropy_table,
							.q_id = component_data.quantization_table,
							.sf_y = component_data.sampling_factor_y,
							.sf_x = component_data.sampling_factor_x,
						};
						++lanes_count;
						if (li.sf_x > max_sf.s[0]) { max_sf.s[0] = li.sf_x; }
						if (li.sf_y > max_sf.s[1]) { max_sf.s[1] = li.sf_y; }
					}
				}
			}
			u8 multilane_count = 0;
			for (u8 start_in_mcu = 0; start_in_mcu < lanes_count; ) {
				u8 end_in_mcu = start_in_mcu + 1;
				while (end_in_mcu < lanes_count && lane_infos[end_in_mcu].c_id == lane_infos[start_in_mcu].c_id) { ++end_in_mcu; }
				u8 amount_in_mcu = end_in_mcu - start_in_mcu;
				if (amount_in_mcu > 1) {
					lane_infos[multilane_count].start_in_mcu = start_in_mcu;
					lane_infos[multilane_count].amount_in_mcu = amount_in_mcu;
					++multilane_count;
				}
				start_in_mcu = end_in_mcu;
			}
			if (!context.updateLaneIndexes(lane_indexes)) { clog("bbx sss 3"); return DECODE_RESULT_ERR; }
			if (!context.updateLaneInfos(lane_infos)) { clog("bbx sss 4"); return DECODE_RESULT_ERR; }
			u8 Ss = DECODE_READ_U8;
			u8 Se = DECODE_READ_U8;
			u8 Ah, Al; DECODE_READ_U4(Ah, Al);
			
			// decode
			u8* payload = context.payload;
			
			// load payload
			u32 payload_length = 0;
			for (bool running = true; running; ++payload_length) {
				u8 x = DECODE_READ_U8;
				if (x == 0xFF) {
					u8 marker = DECODE_READ_U8;
					if (marker == 0x00) {
						// go on
					} else if (Marker :: isRST(marker)) {
						clog("bbx sss 5"); return DECODE_RESULT_ERR;
						//	RESET_SCAN_CONTEXT();
						break;
					} else {
						index -= 2;
						running = false;
						break;
					}
				}
				payload[payload_length] = x;
			}
			for (int i = 0; i < 100; ++i) {
				payload[payload_length+i] = ~0;
			}
			u32 job_size = payload_length * 8;
			
			context.size.payload_length = payload_length;
			context.size.lane_width = job_size;
			context.size.mcu_length = lanes_count;
			context.size.mcu_count = context.size.x_minor / max_sf.s[0] * context.size.y_minor / max_sf.s[1];
			context.size.unit_count = context.size.mcu_count * lanes_count;
			context.size.lane_depth = std :: bit_width(context.size.unit_count) + 1;
			clog("payload_length = %zu", context.size.payload_length);
			clog("lane_width     = %zu", context.size.lane_width    );
			clog("unit_count     = %zu", context.size.unit_count    );
			clog("mcu_count      = %zu", context.size.mcu_count     );
			clog("lane_depth     = %zu", context.size.lane_depth    );
			clog("mcu_length     = %zu", context.size.mcu_length    );
			
			// init buffers
			if (!context.initBuffers2()) { clog("bbx sss 6"); return DECODE_RESULT_ERR; }
			defer { context.finishBuffers2(); };
			CLContext& cl = context.cl;
			
			if (!cl.buffer.payload.write(cl.queue, payload, payload_length + 100)) { clog("bbx sss 7"); return DECODE_RESULT_ERR; }
			if (!cl.kernel.initializeBufferU32.setArg_value(~(u32)0)) { clog("bbx sss 8"); return DECODE_RESULT_ERR; }
			if (!cl.kernel.initializeBufferU32.setArg_buffer(cl.buffer.lanes)) { clog("bbx sss 9"); return DECODE_RESULT_ERR; }
			if (!cl.kernel.initializeBufferU32.call(cl.queue, &cl.buffer.lanes.length)) { clog("bbx sss 10"); return DECODE_RESULT_ERR; }
			if (!cl.kernel.initializeBufferU32.setArg_buffer(cl.buffer.positions)) { clog("bbx sss 11"); return DECODE_RESULT_ERR; }
			if (!cl.kernel.initializeBufferU32.call(cl.queue, &cl.buffer.positions.length)) { clog("bbx sss 12"); return DECODE_RESULT_ERR; }
			
			// start kernels
			size_t decodeHuffman1_dim[2] = { Ns, job_size };
			if (!cl.kernel.decodeHuffman1.setArg_B2(payload_length  )) { clog("bbx sss 13"); return DECODE_RESULT_ERR; }
			if (!cl.kernel.decodeHuffman1.setArg_lane_width(job_size)) { clog("bbx sss 14"); return DECODE_RESULT_ERR; }
			if (!cl.kernel.decodeHuffman1.call(cl.queue, decodeHuffman1_dim)) { clog("bbx sss 15"); return DECODE_RESULT_ERR; }
			
			// copy from done lanes to lanes with same component
			for (u8 i = 0; i < Ns; ++i) {
				auto li = lane_indexes[i];
				auto first_lane = lane_infos[li];
				auto C = first_lane.c_id;
				auto& component_data = context.component_data[C];
				u8 k = 0;
				for (u8 y = 0; y < component_data.sampling_factor_y; ++y) {
					for (u8 x = 0; x < component_data.sampling_factor_x; ++x) {
						if (k == 0) { ++k; continue; }
						size_t a = li * job_size;
						size_t b = a + k++ * job_size;
						if (!cl.buffer.lanes.copy(cl.queue, job_size, a, cl.buffer.lanes, b)) { clog("bbx sss 16"); return DECODE_RESULT_ERR; }
					}
				}
			}
			
			if (!cl.kernel.decodeRaise.setArg_lane_width (job_size   )) { clog("bbx sss 17"); return DECODE_RESULT_ERR; }
			if (!cl.kernel.decodeRaise.setArg_lanes_count(lanes_count)) { clog("bbx sss 18"); return DECODE_RESULT_ERR; }
			u8 depth = 1;
			u32 every_nth = 1;
			for (; true; ++depth) {
				if (lanes_count % (every_nth * 2) == 0) { every_nth *= 2; }
				size_t decodeRaise_dim[2] = {lanes_count / every_nth, job_size };
				u8 prev_depth = depth - 1;
				if (!cl.kernel.decodeRaise.setArg_prev_size_pow(prev_depth)) { clog("bbx sss 19"); return DECODE_RESULT_ERR; }
				if (!cl.kernel.decodeRaise.call(cl.queue, decodeRaise_dim)) { clog("bbx sss 20"); return DECODE_RESULT_ERR; }
				
				u32 n;
				//	clog("depth=%u   lanes_count=%u   job_size=%u   buflen=%zu", depth, lanes_count, job_size, cl.buffer.lanes.length);
				if (!cl.buffer.lanes.read(cl.queue, &n, 1, depth * lanes_count * job_size)) { clog("bbx sss 21"); return DECODE_RESULT_ERR; }
				if (n == ~0) {
					break;
				}
				//	clog("%u", n);
			}
			u32 zero = 0;
			cl.buffer.positions.write(cl.queue, &zero, 1);
			
			if (!cl.kernel.decodeLower.setArg_lane_width (job_size   )) { clog("bbx sss 22"); return DECODE_RESULT_ERR; }
			if (!cl.kernel.decodeLower.setArg_lanes_count(lanes_count)) { clog("bbx sss 23"); return DECODE_RESULT_ERR; }
			for (; depth-- > 0;) {
				if (lanes_count % (4 << depth) == 0) { every_nth /= 2; }
				size_t decodeLower_dim[1] = { job_size };
				if (!cl.kernel.decodeLower.setArg_size_pow(depth)) { clog("bbx sss 24"); return DECODE_RESULT_ERR; }
				if (!cl.kernel.decodeLower.call(cl.queue, decodeLower_dim)) { clog("bbx sss 25"); return DECODE_RESULT_ERR; }
			}
			BJPEG_IF_DEBUG_ALL(DEBUG_LANES("final");)
			
			size_t positionsToIndexes_dim[1] = {job_size};
			if (!cl.kernel.positionsToIndexes.call(cl.queue, positionsToIndexes_dim)) { clog("bbx sss 26"); return DECODE_RESULT_ERR; }
			BJPEG_IF_DEBUG_ALL(if (!cl.buffer.indexes.debugWrite(cl.queue)) { return DECODE_RESULT_ERR; })
			
			if (!cl.kernel.decodeHuffman2.setArg_lane_width(job_size)) { clog("bbx sss 27"); return DECODE_RESULT_ERR; }
			if (!cl.kernel.decodeHuffman2.setArg_lanes_count(lanes_count)) { clog("bbx sss 28"); return DECODE_RESULT_ERR; }
			if (!cl.kernel.decodeHuffman2.call(cl.queue, &context.size.unit_count)) { clog("bbx sss 29"); return DECODE_RESULT_ERR; }
			
			size_t const unit_count = context.size.unit_count;
			size_t const mcu_count = context.size.mcu_count;
			BJPEG_IF_DEBUG_ALL(if (!debugPrintCoefficients<i32>(cl)) { return DECODE_RESULT_ERR; })
			if (!prefixSumCoefficients(mcu_count, lanes_count, multilane_count, cl)) { clog("bbx sss 30"); return DECODE_RESULT_ERR; }
			BJPEG_IF_DEBUG_ALL(if (!debugPrintCoefficients<i32>(cl)) { return DECODE_RESULT_ERR; })
			
			if (!cl.kernel.unzigzag_quantization_dct.setArg_mcu_length(lanes_count)) { clog("bbx sss 31"); return DECODE_RESULT_ERR; }
			if (!cl.kernel.unzigzag_quantization_dct.call(cl.queue, &unit_count)) { clog("bbx sss 32"); return DECODE_RESULT_ERR; }
			BJPEG_IF_DEBUG_ALL(if (!debugPrintCoefficients<f32>(cl)) { return DECODE_RESULT_ERR; })
			
			size_t uninterleave_upsample_dim[2] = {context.size.y_minor / max_sf.s[1], context.size.x_minor / max_sf.s[0], };
			u32x2 image_size = {(u32) context.size.x_mayor, (u32) context.size.y_mayor};
			u32 mcu_per_line = context.size.x_minor / max_sf.s[0];
			if (!cl.kernel.uninterleave_upsample.setArg_max_sf(max_sf)) { clog("bbx sss 33"); return DECODE_RESULT_ERR; }
			if (!cl.kernel.uninterleave_upsample.setArg_image_size(image_size)) { clog("bbx sss 34"); return DECODE_RESULT_ERR; }
			if (!cl.kernel.uninterleave_upsample.setArg_mcu_length(lanes_count)) { clog("bbx sss 35"); return DECODE_RESULT_ERR; }
			if (!cl.kernel.uninterleave_upsample.setArg_mcu_per_line(mcu_per_line)) { clog("bbx sss 36"); return DECODE_RESULT_ERR; }
			if (!cl.kernel.uninterleave_upsample.setArg_component_count(Ns)) { clog("bbx sss 37"); return DECODE_RESULT_ERR; }
			if (!cl.kernel.uninterleave_upsample.call(cl.queue, uninterleave_upsample_dim)) { clog("bbx sss 38"); return DECODE_RESULT_ERR; }
			BJPEG_IF_DEBUG_ALL(if (!cl.buffer.image_temp.debugWrite(cl.queue, std :: cout, [](std::ostream& stream, BJpeg::RGBAF& t) { stream << '(' << t.r << ',' << t.g << ',' << t.b << ')'; })) { return DECODE_RESULT_ERR; })
			
			
			size_t YCbCr_to_RGB_dim[2] = {context.size.y_mayor, context.size.x_mayor};
			if (!cl.kernel.YCbCr_to_RGB.setArg_image_width(context.size.x_mayor)) { clog("bbx sss 39"); return DECODE_RESULT_ERR; }
			if (!cl.kernel.YCbCr_to_RGB.call(cl.queue, YCbCr_to_RGB_dim)) { clog("bbx sss 40"); return DECODE_RESULT_ERR; }
			BJPEG_IF_DEBUG_ALL(if (!cl.buffer.image.debugWrite(cl.queue, std :: cout, [](std::ostream& stream, BJpeg::RGBA& t) { stream << '(' << t.r << ',' << t.g << ',' << t.b << ')'; })) { return DECODE_RESULT_ERR; })
			
			return DECODE_RESULT_OK;
		}
		
		namespace {
			fun void debugPrintCoefficientsEl(i32   x) { if (x != 0) { printf("%7d "  , x); } else { printf("      . "); } }
			fun void debugPrintCoefficientsEl(float x) { if (x != 0) { printf("%7.1f ", x); } else { printf("      . "); } }
			template <typename T = i32>
			fun bool debugPrintCoefficients(CLContext cl) {
				auto buffer = cl.buffer.coefficients;
				
				auto array = new FI[buffer.length][8][8];
				if (!array) { return false; }
				if (!buffer.read(cl.queue, array)) { return false; }
				for (int i = 0; i < 8; ++i) {
					for (int unit_index = 0; unit_index < buffer.length; ++unit_index) {
						for (int j = 0; j < 8; ++j) {
							debugPrintCoefficientsEl(*reinterpret_cast<T*>(&array[unit_index][i][j]));
						}
						printf("| ");
					}
					printf("\n");
				}
				printf("\n");
				return true;
			}
			template <typename T = i32>
			fun bool debugPrintCoefficientsDC(CLContext cl) {
				auto buffer = cl.buffer.coefficients;
				
				auto array = new FI[buffer.length][8][8];
				if (!array) { return false; }
				if (!buffer.read(cl.queue, array)) { return false; }
				for (int unit_index = 0; unit_index < buffer.length; ++unit_index) {
					debugPrintCoefficientsEl(*reinterpret_cast<T*>(&array[unit_index][0][0]));
					printf("| ");
				}
				printf("\n");
				return true;

			}
			
			fun bool prefixSumCoefficients(size_t mcu_count, u8 mcu_length, u8 multilane_count, CLContext cl) {
				if (!cl.kernel.prepareMCUs.setArg_mcu_length(mcu_length)) { return false; }
				if (!cl.kernel.prefixSum1 .setArg_mcu_length(mcu_length)) { return false; }
				if (!cl.kernel.prefixSum2 .setArg_mcu_length(mcu_length)) { return false; }
				
				if (multilane_count) {
					size_t work[2] = {multilane_count, mcu_count};
					if (!cl.kernel.prepareMCUs.call(cl.queue, work)) { return false; }
				}
				size_t work[1];
				u32 half_size;
				for (half_size = 1; 2 * half_size <= mcu_count; half_size *= 2) {
					work[0] = mcu_count / (2 * half_size);
					if (!cl.kernel.prefixSum1.setArg_half_size(half_size)) { return false; }
					if (!cl.kernel.prefixSum1.call(cl.queue, work)) { return false; }
				}
				while (half_size /= 2) {
					work[0] = (mcu_count - half_size) / (2 * half_size);
					if (work[0] == 0) { continue; }
					if (!cl.kernel.prefixSum2.setArg_half_size(half_size)) { return false; }
					if (!cl.kernel.prefixSum2.call(cl.queue, work)) { return false; }
				}
				
				return true;
			}
		}
	}
}