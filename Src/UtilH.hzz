#pragma once
#include <concepts>
#include <cstdint>
#include <CL/cl.h>
#include <type_traits>

#include "./Resource.hzz"

template <typename T>
using ref = T&;
template <typename T>
using rref = T&&;


#define MAX_COMPONENTS 4
#define RECOMMENDED_SPACE (1 << recomended_space_pow)


#define MAX_LANE_COUNT 10
#define MAX_LANE_WIDTH (8 * RECOMMENDED_SPACE)
#define MAX_LANE_ROW_WIDTH (MAX_LANE_COUNT * MAX_LANE_WIDTH)
#define MAX_LANE_SIZE (MAX_LANE_ROW_WIDTH * recomended_space_pow)
#define MAX_UNITS_IN_RECOMMENDED_SPACE (4 * RECOMMENDED_SPACE) // min unit size = 1 dc + EOB = 2 bits

#define ROUND_UP_8(x) ((x + 7) & ~7)

template <typename E>
concept ScopedEnum = std :: is_scoped_enum_v<E>;


//	this is surronded by noexcept by-reference lambda: [&] noexcept {  }
#define defer(...) _defer_macro2(__COUNTER__, __VA_ARGS__)
#define _defer_macro2(...) _defer_macro1(__VA_ARGS__)
#define _defer_macro1(cnt, ...) /* [[no_unique_address]] */ DeferVar const tmp_defer_var_ ## cnt{[&]noexcept{__VA_ARGS__}}
template <typename F> requires std::is_nothrow_invocable_v<F>
struct DeferVar {
	F f;
	~DeferVar() {
		f();
	}
};


namespace BJpeg {
	enum CodingType { DECODE, ENCODE };
}