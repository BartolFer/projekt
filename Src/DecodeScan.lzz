#ifndef VSCODE_ONLY
	#hdr
		#pragma once
		#include <cstdint>
		#include <type_traits>
		// #include <cstddef>
		#include "./Util.hpp"
		#include "./FileBuffer.hpp"
		#include "./Context.hpp"
	#end
	#src
		#include <string.h>
		#include <iostream>
		#include <bit>
		#include "./Huffman.hpp"
		#include "./Markers.hpp"
		#include "./Test.hpp"
	#end
#else // if VSCODE
	#include <cstdint>
	#include <type_traits>
	// #include <cstddef>
	#include <string.h>
	#include <iostream>
	#include <bit>
	#include "./DecodeScan.hpp"
	#include "./Util.hpp"
	#include "./FileBuffer.hpp"
	#include "./Context.hpp"
	#include "./Huffman.hpp"
	#include "./Markers.hpp"
	#include "./Test.hpp"
#endif

#include "./DecoderMacro.hzz"

#define RESET_SCAN_CONTEXT() do for (int ci = 0; ci < MAX_COMPONENTS; ++ci) { auto C = component_order[ci]; context.component_data[C].predictor = 0; } while (0)

namespace BJpeg {
	namespace Decode {
		DECODE_FUN(scan) {
			// interpret header
			uint32_t result;
			ASSERT_MARKER(Marker :: SOS);
			uint16_t Lf; DECODE_READ_U16(Lf);
			uint8_t Ns = DECODE_READ_U8;
			if (Ns >= MAX_COMPONENTS) { 
				std :: cerr << "Not supported more than " << MAX_COMPONENTS << " components: s=" << Ns << "\n";
				return DECODE_RESULT_ERR;
			}
			LaneInfo lane_infos[MAX_LANE_COUNT];
			u8 lane_indexes[MAX_COMPONENTS];
			u8 lanes_count = 0;
			for (uint8_t i = 0; i < Ns; ++i) {
				uint8_t C = DECODE_READ_U8;
				if (C >= MAX_COMPONENTS) {
					std :: cerr << "Not supported more than " << MAX_COMPONENTS << " components: cs=" << C << "\n";
					return DECODE_RESULT_ERR;
				}
				auto& component_data = context.component_data[C];
				DECODE_READ_U4(component_data.dc_entropy_table, component_data.ac_entropy_table);
				lane_indexes[i] = lanes_count;
				for (u8 y = 0; y < component_data.sampling_factor_y; ++y) {
					for (u8 x = 0; x < component_data.sampling_factor_x; ++x) {
						lane_infos[lanes_count] = LaneInfo{
							.c_id = C,
							.dc_huf = component_data.dc_entropy_table,
							.ac_huf = component_data.ac_entropy_table,
							.y = y,
							.x = x,
						};
						++lanes_count;
					}
				}
			}
			u8 multilane_count = 0;
			for (u8 start_in_mcu = 0; start_in_mcu < lanes_count; ) {
				u8 end_in_mcu = start_in_mcu + 1;
				while (end_in_mcu < lanes_count && lane_infos[end_in_mcu].c_id == lane_infos[start_in_mcu].c_id) { ++end_in_mcu; }
				u8 amount_in_mcu = end_in_mcu - start_in_mcu;
				if (amount_in_mcu > 1) {
					lane_infos[multilane_count].start_in_mcu = start_in_mcu;
					lane_infos[multilane_count].amount_in_mcu = amount_in_mcu;
					++multilane_count;
				}
				start_in_mcu = end_in_mcu;
			}
			if (!context.updateLaneIndexes(lane_indexes)) { return DECODE_RESULT_ERR; }
			if (!context.updateLaneInfos(lane_infos)) { return DECODE_RESULT_ERR; }
			uint8_t Ss = DECODE_READ_U8;
			uint8_t Se = DECODE_READ_U8;
			uint8_t Ah, Al; DECODE_READ_U4(Ah, Al);
			
			// decode
			u8* payload = context.payload;
			CLContext<DECODE> cl = context.cl;
			using      decodeHuffman1Args = CLContext<DECODE> :: Kernels ::      decodeHuffman1Args;
			using         decodeRaiseArgs = CLContext<DECODE> :: Kernels ::         decodeRaiseArgs;
			using         decodeLowerArgs = CLContext<DECODE> :: Kernels ::         decodeLowerArgs;
			using  positionsToIndexesArgs = CLContext<DECODE> :: Kernels ::  positionsToIndexesArgs;
			using      decodeHuffman2Args = CLContext<DECODE> :: Kernels ::      decodeHuffman2Args;
			using initializeBufferU32Args = CLContext<DECODE> :: Kernels :: initializeBufferU32Args;
			
			// load payload
			u32 payload_length = 0;
			for (bool running = true; running; ++payload_length) {
				uint8_t x = DECODE_READ_U8;
				if (x == 0xFF) {
					uint8_t marker = DECODE_READ_U8;
					if (marker == 0x00) {
						// go on
					} else if (Marker :: isRST(marker)) {
						return DECODE_RESULT_ERR;
						//	RESET_SCAN_CONTEXT();
						break;
					} else {
						index -= 2;
						running = false;
						break;
					}
				} 
				payload[payload_length] = x;
			}
			for (int i = 0; i < 100; ++i) {
				payload[payload_length+i] = ~0;
			}
			u32 job_size = payload_length * 8;

			// init buffers 
			if (!cl.buffer.payload.write(cl.queue, payload, payload_length)) { return DECODE_RESULT_ERR; }
			if (!cl.kernel.initializeBufferU32.setArg((u32)~0         , initializeBufferU32Args :: value )) { return DECODE_RESULT_ERR; }
			if (!cl.kernel.initializeBufferU32.setArg(cl.buffer.lanes, initializeBufferU32Args :: buffer)) { return DECODE_RESULT_ERR; }
			if (!cl.kernel.initializeBufferU32(cl.queue, 1, &cl.buffer.lanes.length)) { return DECODE_RESULT_ERR; }
			if (!cl.kernel.initializeBufferU32.setArg(cl.buffer.positions, initializeBufferU32Args :: buffer)) { return DECODE_RESULT_ERR; }
			if (!cl.kernel.initializeBufferU32(cl.queue, 1, &cl.buffer.positions.length)) { return DECODE_RESULT_ERR; }
			
			// start kernels
			size_t decodeHuffman1_dim[2] = { Ns, job_size };
			if (!cl.kernel.decodeHuffman1.setArg(payload_length, decodeHuffman1Args :: B2        )) { return DECODE_RESULT_ERR; }
			if (!cl.kernel.decodeHuffman1.setArg(job_size      , decodeHuffman1Args :: lane_width)) { return DECODE_RESULT_ERR; }
			if (!cl.kernel.decodeHuffman1(cl.queue, 2, decodeHuffman1_dim)) { return DECODE_RESULT_ERR; }
			
			// copy from done lanes to lanes with same component
			for (uint8_t i = 0; i < Ns; ++i) {
				auto li = lane_indexes[i];
				auto first_lane = lane_infos[li];
				auto C = first_lane.c_id;
				auto& component_data = context.component_data[C];
				u8 k = 0;
				for (u8 y = 0; y < component_data.sampling_factor_y; ++y) {
					for (u8 x = 0; x < component_data.sampling_factor_x; ++x) {
						if (k == 0) { ++k; continue; }
						size_t a = li * job_size;
						size_t b = a + k++ * job_size;
						if (!cl.buffer.lanes.copy(cl.queue, job_size, a, cl.buffer.lanes, b)) { return DECODE_RESULT_ERR; }
					}
				}
			}
			
			if (!cl.kernel.decodeRaise.setArg(job_size   , decodeRaiseArgs :: lane_width )) { return DECODE_RESULT_ERR; }
			if (!cl.kernel.decodeRaise.setArg(lanes_count, decodeRaiseArgs :: lanes_count)) { return DECODE_RESULT_ERR; }
			u8 depth = 1;
			u32 every_nth = 1;
			std :: cout << (u32)depth << " " << (u32)lanes_count << " " << (u32)job_size << std :: endl;
			for (; true; ++depth) {
				if (lanes_count % (every_nth * 2) == 0) { every_nth *= 2; }
				size_t decodeRaise_dim[2] = {lanes_count / every_nth, job_size };
				u8 prev_depth = depth - 1;
				if (!cl.kernel.decodeRaise.setArg(prev_depth, decodeRaiseArgs :: prev_size_pow)) { return DECODE_RESULT_ERR; }
				if (!cl.kernel.decodeRaise(cl.queue, 2, decodeRaise_dim)) { return DECODE_RESULT_ERR; }
				
				
				u32 n;
				if (!cl.buffer.lanes.read(cl.queue, &n, 1, depth * lanes_count * job_size)) { return DECODE_RESULT_ERR; }
				//	std :: cout << "@ " << (depth * lanes_count * job_size) << " = " << std :: hex << n << std :: endl;
				if (n == ~0) {
					break;
				}
			}
			std :: cout << depth << "k" << std :: endl;
			u32 zero = 0;
			cl.buffer.positions.write(cl.queue, &zero, 1);
			//	return DECODE_RESULT_ERR;
			
			if (!cl.kernel.decodeLower.setArg(job_size   , decodeLowerArgs :: lane_width )) { return DECODE_RESULT_ERR; }
			if (!cl.kernel.decodeLower.setArg(lanes_count, decodeLowerArgs :: lanes_count)) { return DECODE_RESULT_ERR; }
			for (; depth-- > 0;) {
				if (lanes_count % (4 << depth) == 0) { every_nth /= 2; }
				size_t decodeLower_dim[2] = {lanes_count / every_nth, job_size };
				if (!cl.kernel.decodeLower.setArg(depth, decodeLowerArgs :: size_pow)) { return DECODE_RESULT_ERR; }
				if (!cl.kernel.decodeLower(cl.queue, 2, decodeLower_dim)) { return DECODE_RESULT_ERR; }
			}
			//	return DECODE_RESULT_ERR;
			
			size_t positionsToIndexes_dim[2] = {lanes_count, job_size};
			if (!cl.kernel.positionsToIndexes.setArg(job_size, positionsToIndexesArgs :: lane_width)) { return DECODE_RESULT_ERR; }
			if (!cl.kernel.positionsToIndexes(cl.queue, 2, positionsToIndexes_dim)) { return DECODE_RESULT_ERR; }
			
			if (!cl.kernel.decodeHuffman2.setArg(job_size, decodeHuffman2Args :: lane_width)) { return DECODE_RESULT_ERR; }
			if (!cl.kernel.decodeHuffman2(cl.queue, 1, &cl.img_size)) { return DECODE_RESULT_ERR; }
			
			if (!prefixSumCoefficients(cl.img_size / lanes_count, lanes_count, multilane_count, cl)) { return DECODE_RESULT_ERR; }
			
			
			return DECODE_RESULT_OK;
		}
		
		namespace {
			bool prefixSumCoefficients(size_t mcu_count, u8 mcu_length, u8 multilane_count, CLContext<DECODE> cl) {
				using prepareMCUsArgs = CLContext<DECODE> :: Kernels :: prepareMCUsArgs;
				using  prefixSum1Args = CLContext<DECODE> :: Kernels ::  prefixSum1Args;
				using  prefixSum2Args = CLContext<DECODE> :: Kernels ::  prefixSum2Args;
				if (!cl.kernel.prepareMCUs.setArg(mcu_length, prepareMCUsArgs :: mcu_length)) { return false; }
				if (!cl.kernel.prefixSum1.setArg(mcu_length, prefixSum1Args :: mcu_length)) { return false; }
				if (!cl.kernel.prefixSum2.setArg(mcu_length, prefixSum2Args :: mcu_length)) { return false; }
				
				if (multilane_count) {
					size_t work[2] = {multilane_count, mcu_count};
					if (!cl.kernel.prepareMCUs(cl.queue, 2, work)) { return false; }
				}
				size_t work[1];
				u32 half_size;
				for (half_size = 1; 2 * half_size <= mcu_count; half_size *= 2) {
					work[0] = mcu_count / (2 * half_size);
					if (!cl.kernel.prefixSum1.setArg(half_size, prefixSum1Args :: half_size)) { return false; }
					if (!cl.kernel.prefixSum1(cl.queue, 1, work)) { return false; }
				}
				for (half_size /= 4; half_size > 0; half_size /= 2) {
					work[0] = (mcu_count - half_size) / (2 * half_size);
					if (!cl.kernel.prefixSum2.setArg(half_size, prefixSum2Args :: half_size)) { return false; }
					if (!cl.kernel.prefixSum2(cl.queue, 1, work)) { return false; }
				}
				
				
				return true;
			}
		}
	}
}