#include <concepts>
#include <cstdint>
#include <CL/cl.h>
#include <type_traits>

#include "./Resource.zzh"

template <typename T>
using ref = T&;
template <typename T>
using rref = T&&;


#pragma region zzc hdr_decl
	#define MAX_COMPONENTS 4
	#define RECOMMENDED_SPACE (1 << recomended_space_pow)

	#define MAX_LANE_COUNT 10
	#define MAX_LANE_WIDTH (8 * RECOMMENDED_SPACE)
	#define MAX_LANE_ROW_WIDTH (MAX_LANE_COUNT * MAX_LANE_WIDTH)
	#define MAX_LANE_SIZE (MAX_LANE_ROW_WIDTH * recomended_space_pow)
	#define MAX_UNITS_IN_RECOMMENDED_SPACE (4 * RECOMMENDED_SPACE) // min unit size = 1 dc + EOB = 2 bits
	
	#define ROUND_UP_8(x) ((x + 7) & ~7)
	
	//	defers execution of a code block.
	//	It can use variables declared before it.
	//	defer {/* code */};
	#define defer _DeferVar _defer_macro1(__COUNTER__)
	#define _defer_macro1(cnt) _defer_macro2(cnt)
	#define _defer_macro2(cnt) const tmp_defer_var_ ## cnt = [&] noexcept
	template <typename F> requires (std::is_nothrow_invocable_v<F>)
	struct _DeferVar {
		F f;
		fun inline _DeferVar(F f) : f(f) {}
		fun inline ~_DeferVar() {
			f();
		}
	};
#pragma endregion zzc

template <typename E>
concept ScopedEnum = std :: is_scoped_enum_v<E>;


namespace BJpeg {
	enum CodingType { DECODE, ENCODE };
}


fun void* operator new(size_t size) /* noexcept */ { return std :: malloc(size); }
	//	my implementation is `noexcept`, but stdlib declares it as `throws(std::bad_alloc)`
	//	so I can't redeclare differently



namespace BJpeg {
	extern uint8_t recomended_space_pow;

	
	typedef cl_uchar  u8;
	typedef cl_ushort u16;
	typedef cl_uint   u32;
	typedef cl_ulong  u64;
	typedef cl_uchar2 u8x2;
	typedef cl_uint2  u32x2;
	typedef cl_char  i8;
	typedef cl_short i16;
	typedef cl_int   i32;
	typedef cl_long  i64;
	typedef cl_int2  i32x2;

	uint8_t const to_zigzag[8][8] = {
		{  0,  1,  5,  6, 14, 15, 27, 28 },
		{  2,  4,  7, 13, 16, 26, 29, 42 },
		{  3,  8, 12, 17, 25, 30, 41, 43 },
		{  9, 11, 18, 24, 31, 40, 44, 53 },
		{ 10, 19, 23, 32, 39, 45, 52, 54 },
		{ 20, 22, 33, 38, 46, 51, 55, 60 },
		{ 21, 34, 37, 47, 50, 56, 59, 61 },
		{ 35, 36, 48, 49, 57, 58, 62, 63 },
	};
	uint8_t const from_zigzag[64] = { 0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63, };
}

