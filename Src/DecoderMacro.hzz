#define DECODE_FUN(name) uint32_t name(ref<DecodeContext> context, ref<InputFileBuffer> file, uint32_t index)

#define CHECK_MARKER(marker) (                                \
	(file[index] == 0xFF && file[index + 1] == (marker))       \
	&& ((index += 2) || true)                                   \
) // index += 2 only if above condition, but don't affect the result
#define ASSERT_MARKER(marker) do { if (!CHECK_MARKER(marker)) { return DECODE_RESULT_ERR; } } while (0)
#define CALL_DECODE(function) do {                 \
	result = ((function)(context, file, index));    \
	if (result == 0) { return result; }              \
	else { index = result; }                          \
} while (0)
#define TRY_CALL_DECODE(function)                     \
	result = ((function)(context, file, index));       \
	if (result != 0) { index = result; } // made for else after this

#define DECODE_RESULT_OK  index
#define DECODE_RESULT_ERR 0
#define DECODE_READ_U16(var) do {                                                                                \
	static_assert(std::is_lvalue_reference_v<decltype((var))>, "Variable is not an lvalue");                      \
	static_assert(std::is_integral_v<std::remove_reference_t<decltype(var)>>, "Variable is not an integer");       \
	static_assert(sizeof(var) >= 2, "Variable must be larger than 2 bytes");                                        \
	(var) = DECODE_READ_U8;                                                                                          \
	(var) <<= 8;                                                                                                      \
	(var) |= DECODE_READ_U8;                                                                                           \
} while (0)
#define DECODE_READ_U8 (file[index++])
#define DECODE_READ_U4(var1, var2) do { uint8_t var = DECODE_READ_U8; (var1) = var >> 4; (var2) = var & 0b1111; } while (0)
