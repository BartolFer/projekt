
#pragma region zzc hdr_decl
	#include <vector>
	#include <iostream>
#pragma endregion zzc
#pragma region zzc src_decl
	#include <fstream>
#pragma endregion zzc

#ifdef TESTING
	namespace BJpeg {
		static std :: ofstream output = std :: ofstream("./log.txt");
		//	static std :: ostream& output = std :: cout;
		static std :: ostream& error = std :: cerr;
		struct Test {
			fun static std :: ostream& getOutput() {
				return output << "\nLOG: ";
			}
			fun static std :: ostream& getError() {
				return error << "\nERROR: ";
			}
			
			fun virtual char const* getDescription() = 0;
			fun virtual bool test() = 0;
			
			fun virtual void init() {}
			fun virtual void finish() {}
			
			fun Test() {
				Test :: tests.push_back(this);
			}
			
			fun static bool runTests() {
				size_t success = 0;
				size_t failure = 0;
				for (auto test : tests) {
					test->init();
					if (test->test()) {
						Test :: getOutput() << "\t\t" << "Test <" << test->getDescription() << "> success" << std :: endl;
						++success;
					} else {
						Test :: getError() << "\t\t" << "Test <" << test->getDescription() << "> failed" << std :: endl;
						++failure;
					}
					test->finish();
				}
				Test :: getOutput() << "\t\t" << "Finished with " << tests.size() << " tests" << std :: endl;
				std :: cout         << "\t\t" << "Finished with " << tests.size() << " tests" << std :: endl;
				Test :: getOutput() << "\t\t\t" << "Successful " << success << "        failed " << failure << std :: endl;
				std :: cout         << "\t\t\t" << "Successful " << success << "        failed " << failure << std :: endl;
				return failure == 0;
			}
		private:
			static std :: vector<Test*> tests;
		};
		
	}
	fun int main() {
		if (!BJpeg :: Test :: runTests()) { return EXIT_FAILURE; }
	}
#endif