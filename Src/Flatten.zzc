#pragma region zzc hdr_decl zzc
	#include <concepts>
	#include <utility>
	#include <ranges>
	#include <iterator>
	#include <type_traits>

	template<typename X, typename T>
	concept IterableOf = requires(X& x, T t) {
		std :: begin(x);
		std :: end(x);
		requires std :: convertible_to<decltype(*std :: begin(x)), T>;
	};

	template <typename T, typename X>
	struct _IterateFlat {
		X& x;
		fun inline _IterateFlat(X& x) : x(x) {}

		struct Iter {
			using OuterIter = decltype(std :: begin(std :: declval<X&>()));
			OuterIter b;
			using NestedFlat = _IterateFlat<T, decltype(*b)>;
			NestedFlat it;
			using InnerIter = decltype(it.begin());
			InnerIter itt;
			fun inline Iter(OuterIter b) : b(b), it(*b), itt(it.begin()) {}

			fun inline Iter& operator ++() {
				++self.itt;
				while (self.itt == self.it.end()) {
					++b;
					new (&self.it) NestedFlat (*b);
					// self.it = *b;
					new (&self.itt) InnerIter(self.it.begin());
					//	self.itt = self.it.begin();
				}
				return *this;
			}
			fun inline bool operator !=(Iter const& other) const { return self.itt != other.itt; }
			fun inline bool operator ==(Iter const& other) const { return self.itt == other.itt; }
			fun inline auto& operator *() const { return *self.itt; }
		};

		fun inline Iter begin() { return Iter(std :: begin(self.x)); }
		fun inline Iter end  () { return Iter(std :: end  (self.x)); }
	};

	template <typename T, typename X> requires (IterableOf<X, T>)
	struct _IterateFlat<T, X> {
		X& x;
		fun inline _IterateFlat(X& x) : x(x) {}

		fun inline auto begin() { return std :: begin(self.x); }
		fun inline auto end  () { return std :: end  (self.x); }
	};

	/** 
	 * Used like for (float x : flatten<float>(float_matrix)) 
	 * You don't need to supply 2nd template argument
	 */
	template <typename T, typename X>
	fun inline auto flatten(X& it) { return _IterateFlat<T, X>(it); }


	//	int main() {
	//		//	float v[] = {1, 2, 5, 7};
	//		//	float v[2][2] = {{1, 2}, {5, 8}};
	//		//	std :: vector<float> v = {1, 2, 5, 6};
	//		//	std :: vector<std :: vector<float>> v = {{1, 4, 4}, {5, 8}};
	//		std :: vector<std :: vector<float>> v = {{1, 33, 4}, {}, {5, 8}};
	//	
	//		for (auto& x : flatten<float>(v)) {
	//			std :: cout << y << std :: endl;
	//		}
	//		for (auto& x : flatten<std :: vector<float>>(v)) {
	//			for (auto y : x) {
	//				std :: cout << y << " ";
	//			}
	//			std :: cout << std :: endl;
	//		}
	//	}
#pragma endregion zzc
