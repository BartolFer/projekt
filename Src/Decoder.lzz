#ifndef VSCODE_ONLY
	#hdr
		#pragma once
		#include <cstdint>
		#include <type_traits>
		// #include <cstddef>
		#include "./Util.hpp"
		#include "./FileBuffer.hpp"
		#include "./Context.hpp"
	#end
	#src
		#include <string.h>
		#include <iostream>
		#include "./DecodeScan.hpp"
		#include "./Huffman.hpp"
		#include "./Markers.hpp"
	#end
#else // if VSCODE
	#include <cstdint>
	#include <type_traits>
	// #include <cstddef>
	#include <string.h>
	#include <iostream>
	#include "./Decoder.hpp"
	#include "./Util.hpp"
	#include "./FileBuffer.hpp"
	#include "./Context.hpp"
	#include "./DecodeScan.hpp"
	#include "./Huffman.hpp"
	#include "./Markers.hpp"
#endif

#include "./DecoderMacro.hzz"

namespace BJpeg {
	namespace Decode {
		DECODE_FUN(image) {
			// printf("a\n");
			uint32_t result;
			ASSERT_MARKER(Marker :: SOI);
			CALL_DECODE(misc);
			if (file[index + 1] == Marker :: DHP) { CALL_DECODE(hierarchical); }
			else { CALL_DECODE(frame); }
			ASSERT_MARKER(Marker :: EOI);
			return DECODE_RESULT_OK;
		}
		
		namespace {
			DECODE_FUN(misc) {
				// while (true) { // actually, while has something to read
				for (int i = 0; i < 100; ++i) { // actually, while has something to read
					if (DECODE_READ_U8 != 0xFF) { return DECODE_RESULT_ERR; }
					uint8_t m = DECODE_READ_U8;
					uint16_t segment_length; DECODE_READ_U16(segment_length);
					switch (m) {
						case Marker :: DHT: {
							auto end = index + segment_length - 2;
							while (index < end) {
								uint8_t table_class, table_dest; DECODE_READ_U4(table_class, table_dest);
								if (table_class > 1 || table_dest > 3) { return DECODE_RESULT_ERR; }
								HuffmanTree<CodingType :: DECODE>& huffman = context.huffman_tree[table_class][table_dest];
								huffman.reset();
								uint16_t last_assigned_index = 0;
								uint32_t const counts_start = index - 1; // because of 1-indexing
								uint32_t const values_start = index + 16;
								uint16_t code = 0;
								uint8_t value_index = 0;
								uint8_t last_length = 1;
								uint32_t last_code  = 0;
								for (uint8_t length = 1; length <= 16; ++length) {
									uint8_t const count = file[counts_start + length];
									for (uint8_t i = 0; i < count; ++i) {
										uint8_t value = file[values_start + value_index];
										huffman.update(code, length, value, last_assigned_index);
										
										++code;
										++value_index;
										
										last_code = code;
										last_length = length;
									}
									code <<= 1;
								}
								if (last_code + 1 != 1 << last_length) {
									return DECODE_RESULT_ERR;
								}
								huffman.setLastNode(last_length);
								index = values_start + value_index;
							}
							if (!context.updateHuffmanCL()) { return DECODE_RESULT_ERR; }
						} break;
						case Marker :: DAC: {
							// not implemented
							index += segment_length - 2;
						} break;
						case Marker :: DQT: {
							for (uint32_t end = index - 2 + segment_length; index < end; ) {
								uint8_t Pq, Tq; DECODE_READ_U4(Pq, Tq);
								if (Tq > 3) { return DECODE_RESULT_ERR; }
								uint16_t* table = context.quantization_table[Tq];
								// or just memcpy + index update // but not actually (it complicates things, but is done once per image (not worth it))
								if (Pq == 0) { for (uint8_t i = 0; i < 64; ++i) { table[i] = DECODE_READ_U8; } } 
								else         { for (uint8_t i = 0; i < 64; ++i) { DECODE_READ_U16(table[i]); } }
							}
							// TODO quantization CL
						} break;
						case Marker :: DRI: {
							DECODE_READ_U16(context.restart_interval);
						} break;
						case Marker :: COM: { index += segment_length - 2; } break;
						default: {
							if (Marker :: isAPP(m)) {
								index += segment_length - 2;
							} else {
								// not a misc marker
								index -= 4;
								return DECODE_RESULT_OK;
							}
						} break;
					}
				}
				return DECODE_RESULT_OK;
			}
			DECODE_FUN(hierarchical) {
				std :: cerr << "Hierarchical mode not supported\n";
				// TODO if enabled, refactor frame (see [564678324])
				return DECODE_RESULT_ERR;
				uint32_t result;
				ASSERT_MARKER(Marker :: DHP);
				uint16_t Lf; DECODE_READ_U16(Lf);
				context.precision = DECODE_READ_U8;
				DECODE_READ_U16(context.Y);
				DECODE_READ_U16(context.X);
				uint8_t Nf = DECODE_READ_U8;
				for (uint8_t i = 0; i < Nf; ++i) {
					uint8_t C = DECODE_READ_U8;
					uint8_t H, V; DECODE_READ_U4(H, V);
					uint8_t Tq = DECODE_READ_U8;
				}
				while (true) {
					CALL_DECODE(misc);
					if (CHECK_MARKER(Marker :: EXP)) {
						uint16_t Le; DECODE_READ_U16(Le);
						uint8_t Eh, Ev; DECODE_READ_U4(Eh, Ev);
					}
					TRY_CALL_DECODE(frame) else { return DECODE_RESULT_OK; }
				}
			}
			DECODE_FUN(frame) {
				uint32_t result;
				if (DECODE_READ_U8 != 0xFF) { return DECODE_RESULT_ERR; }
				// TODO
				uint8_t marker = DECODE_READ_U8;
				if (!Marker :: isSOF(marker)) { return DECODE_RESULT_ERR; }
				context.sof_data = Marker :: SOFData(marker);
				uint16_t Lf; DECODE_READ_U16(Lf);
				context.precision = DECODE_READ_U8;
				DECODE_READ_U16(context.Y);
				DECODE_READ_U16(context.X);
				// TODO [564678324] this doesn't support multiple frames
				// which is fine if we don't support hierarchical
				if (!context.initResultBuffer()) { return DECODE_RESULT_ERR; }
				uint8_t Nf = DECODE_READ_U8;
				if (Nf >= MAX_COMPONENTS) { 
					std :: cerr << "Not supported more than " << MAX_COMPONENTS << " components: " << Nf << "\n";
					return DECODE_RESULT_ERR;
				}
				for (uint8_t i = 0; i < Nf; ++i) {
					uint8_t C = DECODE_READ_U8;
					if (C >= MAX_COMPONENTS) {
						std :: cerr << "Not supported more than " << MAX_COMPONENTS << " components: c=" << C << "\n";
						return DECODE_RESULT_ERR;
					}
					auto& component_data = context.component_data[C];
					DECODE_READ_U4(component_data.sampling_factor_x, component_data.sampling_factor_y);
					component_data.quantization_table = DECODE_READ_U8;
				}
				CALL_DECODE(misc);
				CALL_DECODE(scan); // at least 1 scan
				// DNL
				if (CHECK_MARKER(Marker :: DNL)) {
					std :: cerr << "DNL not supported\n";
					return DECODE_RESULT_ERR;
					uint16_t Ld; DECODE_READ_U16(Ld);
					uint16_t NL; DECODE_READ_U16(NL);
				}
				while (true) {
					CALL_DECODE(misc);
					TRY_CALL_DECODE(scan) else { return DECODE_RESULT_OK; }
				}
			}
		}
	}
}