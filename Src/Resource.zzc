
#include <concepts>



#pragma region zzc hdr_decl zzc
namespace BJpeg {
	template <typename>
	struct FunctionTraits;

	template <typename T, typename... Args>
	struct FunctionTraits<T(Args...)> {
		using ReturnType = T;
	};
	template <typename T, typename... Args>
	struct FunctionTraits<T (*)(Args...)> {
		using ReturnType = T;
	};
	template <typename T, typename C, typename... Args>
	struct FunctionTraits<T (C::*)(Args...)> {
		using ReturnType = T;
	};
	template <typename F>
	using ReturnType = typename FunctionTraits<F> :: ReturnType;

	template <typename T>
	concept IsResource = requires(T t) {
		requires std :: is_member_function_pointer_v<decltype(&T :: init)>;
		requires std :: convertible_to<ReturnType<decltype(&T :: init)>, bool>;
		{ t.finish() } noexcept;
	};
	template <typename T, typename... Args>
	concept IsActualResource = requires(T t, Args... args) {
		{ t.init(args...) } -> std :: convertible_to<bool>;
		{ t.finish() } noexcept;
	};
	template <typename T> requires (IsResource<T>)
	struct Resource : T {
		bool _resource_ok = true;
		template <typename... Args> requires (IsActualResource<T, Args...>)
		fun explicit inline Resource(T t, Args&&... args) : T(t) {
			self._resource_ok = self.init(args...);
		}
		template <typename... Args> requires (IsActualResource<T, Args...>)
		fun explicit inline Resource(Args&&... args) {
			self._resource_ok = self.init(args...);
		}
		fun inline ~Resource() {
			self.finish();
		}
		// Resource(Resource<T>) = delete;
		fun Resource(Resource<T>&) = delete;
		fun Resource(Resource<T>&&) = delete;
		fun operator bool() { return self._resource_ok; }
	};
	
	template <typename T> struct  IsAResource              : std :: false_type {};
	template <typename T> struct  IsAResource<Resource<T>> : std ::  true_type {};
	template <typename T> concept IsNotAResource = !IsAResource<T>::value;
}
#pragma endregion zzc

